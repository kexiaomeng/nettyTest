package com.nari.sun.dao;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.nari.sun.QzjMpRbphl;
import com.nari.sun.QzjMpRbphlExample.Criteria;
import com.nari.sun.QzjMpRbphlExample.Criterion;
import com.nari.sun.QzjMpRbphlExample;
import java.util.List;
import java.util.Map;

public class QzjMpRbphlSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table qzj_mp_rbphl
     *
     * @mbggenerated
     */
    public String countByExample(QzjMpRbphlExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("qzj_mp_rbphl");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table qzj_mp_rbphl
     *
     * @mbggenerated
     */
    public String deleteByExample(QzjMpRbphlExample example) {
        BEGIN();
        DELETE_FROM("qzj_mp_rbphl");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table qzj_mp_rbphl
     *
     * @mbggenerated
     */
    public String insertSelective(QzjMpRbphl record) {
        BEGIN();
        INSERT_INTO("qzj_mp_rbphl");
        
        if (record.getZddz() != null) {
            VALUES("ZDDZ", "#{zddz,jdbcType=VARCHAR}");
        }
        
        if (record.getCldlx() != null) {
            VALUES("CLDLX", "#{cldlx,jdbcType=DECIMAL}");
        }
        
        if (record.getCldh() != null) {
            VALUES("CLDH", "#{cldh,jdbcType=VARCHAR}");
        }
        
        if (record.getSjsj() != null) {
            VALUES("SJSJ", "#{sjsj,jdbcType=DATE}");
        }
        
        if (record.getZgdlbphd() != null) {
            VALUES("ZGDLBPHD", "#{zgdlbphd,jdbcType=DECIMAL}");
        }
        
        if (record.getZgdlbphdcxsj() != null) {
            VALUES("ZGDLBPHDCXSJ", "#{zgdlbphdcxsj,jdbcType=DATE}");
        }
        
        if (record.getZddlbphd() != null) {
            VALUES("ZDDLBPHD", "#{zddlbphd,jdbcType=DECIMAL}");
        }
        
        if (record.getZddlbphdcxsj() != null) {
            VALUES("ZDDLBPHDCXSJ", "#{zddlbphdcxsj,jdbcType=DATE}");
        }
        
        if (record.getDybphdjcsj() != null) {
            VALUES("DYBPHDJCSJ", "#{dybphdjcsj,jdbcType=DECIMAL}");
        }
        
        if (record.getDybphdhgl() != null) {
            VALUES("DYBPHDHGL", "#{dybphdhgl,jdbcType=DECIMAL}");
        }
        
        if (record.getDybphdcxl() != null) {
            VALUES("DYBPHDCXL", "#{dybphdcxl,jdbcType=DECIMAL}");
        }
        
        if (record.getDybphdcsxsj() != null) {
            VALUES("DYBPHDCSXSJ", "#{dybphdcsxsj,jdbcType=DECIMAL}");
        }
        
        if (record.getZgdybphd() != null) {
            VALUES("ZGDYBPHD", "#{zgdybphd,jdbcType=DECIMAL}");
        }
        
        if (record.getZgdybphdcxsj() != null) {
            VALUES("ZGDYBPHDCXSJ", "#{zgdybphdcxsj,jdbcType=DATE}");
        }
        
        if (record.getZddybphd() != null) {
            VALUES("ZDDYBPHD", "#{zddybphd,jdbcType=DECIMAL}");
        }
        
        if (record.getZddybphdcxsj() != null) {
            VALUES("ZDDYBPHDCXSJ", "#{zddybphdcxsj,jdbcType=DATE}");
        }
        
        if (record.getXbz() != null) {
            VALUES("XBZ", "#{xbz,jdbcType=DECIMAL}");
        }
        
        if (record.getXdybphd() != null) {
            VALUES("XDYBPHD", "#{xdybphd,jdbcType=DECIMAL}");
        }
        
        if (record.getXdlbphd() != null) {
            VALUES("XDLBPHD", "#{xdlbphd,jdbcType=DECIMAL}");
        }
        
        if (record.getDybphdpjz() != null) {
            VALUES("DYBPHDPJZ", "#{dybphdpjz,jdbcType=DECIMAL}");
        }
        
        if (record.getDybphdpjz95() != null) {
            VALUES("DYBPHDPJZ_95", "#{dybphdpjz95,jdbcType=DECIMAL}");
        }
        
        if (record.getDlbphdpjz() != null) {
            VALUES("DLBPHDPJZ", "#{dlbphdpjz,jdbcType=DECIMAL}");
        }
        
        if (record.getDlbphdpjz95() != null) {
            VALUES("DLBPHDPJZ_95", "#{dlbphdpjz95,jdbcType=DECIMAL}");
        }
        
        if (record.getLastTime() != null) {
            VALUES("LAST_TIME", "#{lastTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCopytime() != null) {
            VALUES("COPYTIME", "#{copytime,jdbcType=DATE}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table qzj_mp_rbphl
     *
     * @mbggenerated
     */
    public String selectByExample(QzjMpRbphlExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("ZDDZ");
        } else {
            SELECT("ZDDZ");
        }
        SELECT("CLDLX");
        SELECT("CLDH");
        SELECT("SJSJ");
        SELECT("ZGDLBPHD");
        SELECT("ZGDLBPHDCXSJ");
        SELECT("ZDDLBPHD");
        SELECT("ZDDLBPHDCXSJ");
        SELECT("DYBPHDJCSJ");
        SELECT("DYBPHDHGL");
        SELECT("DYBPHDCXL");
        SELECT("DYBPHDCSXSJ");
        SELECT("ZGDYBPHD");
        SELECT("ZGDYBPHDCXSJ");
        SELECT("ZDDYBPHD");
        SELECT("ZDDYBPHDCXSJ");
        SELECT("XBZ");
        SELECT("XDYBPHD");
        SELECT("XDLBPHD");
        SELECT("DYBPHDPJZ");
        SELECT("DYBPHDPJZ_95");
        SELECT("DLBPHDPJZ");
        SELECT("DLBPHDPJZ_95");
        SELECT("LAST_TIME");
        SELECT("COPYTIME");
        FROM("qzj_mp_rbphl");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table qzj_mp_rbphl
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        QzjMpRbphl record = (QzjMpRbphl) parameter.get("record");
        QzjMpRbphlExample example = (QzjMpRbphlExample) parameter.get("example");
        
        BEGIN();
        UPDATE("qzj_mp_rbphl");
        
        if (record.getZddz() != null) {
            SET("ZDDZ = #{record.zddz,jdbcType=VARCHAR}");
        }
        
        if (record.getCldlx() != null) {
            SET("CLDLX = #{record.cldlx,jdbcType=DECIMAL}");
        }
        
        if (record.getCldh() != null) {
            SET("CLDH = #{record.cldh,jdbcType=VARCHAR}");
        }
        
        if (record.getSjsj() != null) {
            SET("SJSJ = #{record.sjsj,jdbcType=DATE}");
        }
        
        if (record.getZgdlbphd() != null) {
            SET("ZGDLBPHD = #{record.zgdlbphd,jdbcType=DECIMAL}");
        }
        
        if (record.getZgdlbphdcxsj() != null) {
            SET("ZGDLBPHDCXSJ = #{record.zgdlbphdcxsj,jdbcType=DATE}");
        }
        
        if (record.getZddlbphd() != null) {
            SET("ZDDLBPHD = #{record.zddlbphd,jdbcType=DECIMAL}");
        }
        
        if (record.getZddlbphdcxsj() != null) {
            SET("ZDDLBPHDCXSJ = #{record.zddlbphdcxsj,jdbcType=DATE}");
        }
        
        if (record.getDybphdjcsj() != null) {
            SET("DYBPHDJCSJ = #{record.dybphdjcsj,jdbcType=DECIMAL}");
        }
        
        if (record.getDybphdhgl() != null) {
            SET("DYBPHDHGL = #{record.dybphdhgl,jdbcType=DECIMAL}");
        }
        
        if (record.getDybphdcxl() != null) {
            SET("DYBPHDCXL = #{record.dybphdcxl,jdbcType=DECIMAL}");
        }
        
        if (record.getDybphdcsxsj() != null) {
            SET("DYBPHDCSXSJ = #{record.dybphdcsxsj,jdbcType=DECIMAL}");
        }
        
        if (record.getZgdybphd() != null) {
            SET("ZGDYBPHD = #{record.zgdybphd,jdbcType=DECIMAL}");
        }
        
        if (record.getZgdybphdcxsj() != null) {
            SET("ZGDYBPHDCXSJ = #{record.zgdybphdcxsj,jdbcType=DATE}");
        }
        
        if (record.getZddybphd() != null) {
            SET("ZDDYBPHD = #{record.zddybphd,jdbcType=DECIMAL}");
        }
        
        if (record.getZddybphdcxsj() != null) {
            SET("ZDDYBPHDCXSJ = #{record.zddybphdcxsj,jdbcType=DATE}");
        }
        
        if (record.getXbz() != null) {
            SET("XBZ = #{record.xbz,jdbcType=DECIMAL}");
        }
        
        if (record.getXdybphd() != null) {
            SET("XDYBPHD = #{record.xdybphd,jdbcType=DECIMAL}");
        }
        
        if (record.getXdlbphd() != null) {
            SET("XDLBPHD = #{record.xdlbphd,jdbcType=DECIMAL}");
        }
        
        if (record.getDybphdpjz() != null) {
            SET("DYBPHDPJZ = #{record.dybphdpjz,jdbcType=DECIMAL}");
        }
        
        if (record.getDybphdpjz95() != null) {
            SET("DYBPHDPJZ_95 = #{record.dybphdpjz95,jdbcType=DECIMAL}");
        }
        
        if (record.getDlbphdpjz() != null) {
            SET("DLBPHDPJZ = #{record.dlbphdpjz,jdbcType=DECIMAL}");
        }
        
        if (record.getDlbphdpjz95() != null) {
            SET("DLBPHDPJZ_95 = #{record.dlbphdpjz95,jdbcType=DECIMAL}");
        }
        
        if (record.getLastTime() != null) {
            SET("LAST_TIME = #{record.lastTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCopytime() != null) {
            SET("COPYTIME = #{record.copytime,jdbcType=DATE}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table qzj_mp_rbphl
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("qzj_mp_rbphl");
        
        SET("ZDDZ = #{record.zddz,jdbcType=VARCHAR}");
        SET("CLDLX = #{record.cldlx,jdbcType=DECIMAL}");
        SET("CLDH = #{record.cldh,jdbcType=VARCHAR}");
        SET("SJSJ = #{record.sjsj,jdbcType=DATE}");
        SET("ZGDLBPHD = #{record.zgdlbphd,jdbcType=DECIMAL}");
        SET("ZGDLBPHDCXSJ = #{record.zgdlbphdcxsj,jdbcType=DATE}");
        SET("ZDDLBPHD = #{record.zddlbphd,jdbcType=DECIMAL}");
        SET("ZDDLBPHDCXSJ = #{record.zddlbphdcxsj,jdbcType=DATE}");
        SET("DYBPHDJCSJ = #{record.dybphdjcsj,jdbcType=DECIMAL}");
        SET("DYBPHDHGL = #{record.dybphdhgl,jdbcType=DECIMAL}");
        SET("DYBPHDCXL = #{record.dybphdcxl,jdbcType=DECIMAL}");
        SET("DYBPHDCSXSJ = #{record.dybphdcsxsj,jdbcType=DECIMAL}");
        SET("ZGDYBPHD = #{record.zgdybphd,jdbcType=DECIMAL}");
        SET("ZGDYBPHDCXSJ = #{record.zgdybphdcxsj,jdbcType=DATE}");
        SET("ZDDYBPHD = #{record.zddybphd,jdbcType=DECIMAL}");
        SET("ZDDYBPHDCXSJ = #{record.zddybphdcxsj,jdbcType=DATE}");
        SET("XBZ = #{record.xbz,jdbcType=DECIMAL}");
        SET("XDYBPHD = #{record.xdybphd,jdbcType=DECIMAL}");
        SET("XDLBPHD = #{record.xdlbphd,jdbcType=DECIMAL}");
        SET("DYBPHDPJZ = #{record.dybphdpjz,jdbcType=DECIMAL}");
        SET("DYBPHDPJZ_95 = #{record.dybphdpjz95,jdbcType=DECIMAL}");
        SET("DLBPHDPJZ = #{record.dlbphdpjz,jdbcType=DECIMAL}");
        SET("DLBPHDPJZ_95 = #{record.dlbphdpjz95,jdbcType=DECIMAL}");
        SET("LAST_TIME = #{record.lastTime,jdbcType=TIMESTAMP}");
        SET("COPYTIME = #{record.copytime,jdbcType=DATE}");
        
        QzjMpRbphlExample example = (QzjMpRbphlExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table qzj_mp_rbphl
     *
     * @mbggenerated
     */
    protected void applyWhere(QzjMpRbphlExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}